/** @addtogroup fixed_step Explicit fixed-step methods
*
* \ingroup odeint
*  @{ */

/** 
* **Fourth-order Runge-Kutta method**
*
* Info: https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods
* @author Juho Timonen
*
* @param t0 initial time
* @param y0 initial state, D-vector
* @param h step size (positive)
* @param num_steps number of steps to take
* @param a0 array of integer inputs given to `derivative_fun()`
* @param theta parameter vector given to `derivative_fun()`
* @return array of D-vectors, length equal to `num_steps + 1`
*/
array[] vector odeint_rk4(real t0, vector y0, data real h,
                          data int num_steps, array[] int a0, vector theta) {
  int d = num_elements(y0);
  array[num_steps + 1] vector[d] y;
  vector[d] k1;
  vector[d] k2;
  vector[d] k3;
  vector[d] k4;
  real t = t0;
  y[1] = y0;
  
  // Integrate at grid of time points
  for (i in 1 : num_steps) {
    k1 = h * derivative_fun(t, y[i], a0, theta);
    k2 = h * derivative_fun(t + 0.5 * h, y[i] + 0.5 * k1, a0, theta);
    k3 = h * derivative_fun(t + 0.5 * h, y[i] + 0.5 * k2, a0, theta);
    k4 = h * derivative_fun(t + h, y[i] + k3, a0, theta);
    y[i + 1] = y[i] + (k1 + 2.0 * k2 + 2.0 * k3 + k4) / 6.0;
    t = t + h;
  }
  
  return (y);
}