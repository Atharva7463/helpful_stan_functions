/** @addtogroup fixed_step Explicit fixed-step methods
*
* @include \ode\odeint_midpoint.stanfunctions
*
* \ingroup odeint
*  @{ */

/**
* **Explicit midpoint method**
*
* Info: https://en.wikipedia.org/wiki/Midpoint_method
* @author Juho Timonen
*
* @param t0 initial time
* @param y0 initial state, D-vector
* @param h step size (positive)
* @param num_steps number of steps to take
* @param a0 array of integer inputs given to `derivative_fun()`
* @param theta parameter vector given to `derivative_fun()`
* @return array of D-vectors, length equal to `num_steps + 1`
*/
array[] vector odeint_midpoint(real t0, vector y0, data real h,
                               data int num_steps, array[] int a0,
                               vector theta) {
  int d = num_elements(y0);
  array[num_steps + 1] vector[d] y;
  vector[d] y_mid;
  real t = t0;
  y[1] = y0;
  
  // Integrate at grid of time points
  for (i in 1 : num_steps) {
    // Half-Euler step
    y_mid = y[i] + 0.5 * h * derivative_fun(t, y[i], a0, theta);
    
    // Full step using derivative at midpoint
    y[i + 1] = y[i] + h * derivative_fun(t + 0.5 * h, y_mid, a0, theta);
    t = t + h;
  }
  
  return y;
}