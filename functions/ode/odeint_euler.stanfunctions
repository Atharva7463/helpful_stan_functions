/** \defgroup odeint ODE solvers
*
* Numerical ODE (ordinary differential equation) integration functions
* \emoji :turtle:.
*
* @include \ode\odeint_euler.stanfunctions
*
**/

/** @addtogroup fixed_step Explicit fixed-step methods
*
* These are explicit fixed-step ODE integrators, which evaluate the
* solution at an equispaced grid of time points. Interpolation can then be
* used to get the solution at other desired output time points. The functions
* assume that `derivative_fun()`, which is the system function of the ODE,
* is defined earlier in the functions block. It must have signature
*
*   `vector derivative_fun(real t, vector y, int[] a0, vector a1)`
*  
* i.e. same as what can be used with the [built-in ODE solvers](https://mc-stan.org/docs/2_26/stan-users-guide/coding-the-ode-system-function.html
* ) of Stan.
*
* \ingroup odeint
*  @{ */

/** 
* **Forward Euler method**
*
* Info: https://en.wikipedia.org/wiki/Euler_method
* @author Juho Timonen
*
* @param t0 initial time
* @param y0 initial state, D-vector
* @param h step size (positive)
* @param num_steps number of steps to take
* @param a0 array of integer inputs given to `derivative_fun()`
* @param theta parameter vector given to `derivative_fun()`
* @return array of D-vectors, length equal to `num_steps + 1`
*/
array[] vector odeint_euler(real t0, vector y0, data real h,
                            data int num_steps, array[] int a0, vector theta) {
  int d = num_elements(y0);
  array[num_steps + 1] vector[d] y;
  real t = t0;
  y[1] = y0;
  
  // Integrate at grid of time points
  for (i in 1 : num_steps) {
    y[i + 1] = y[i] + h * derivative_fun(t, y[i], a0, theta);
    t = t + h;
  }
  return y;
}

/** @} */